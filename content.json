{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://misaka10032.com"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2018-09-07T04:48:20.630Z","updated":"2018-09-06T11:46:26.771Z","comments":false,"path":"/404.html","permalink":"http://misaka10032.com//404.html","excerpt":"","text":""},{"title":"Categories","date":"2018-09-07T03:04:52.526Z","updated":"2018-09-07T03:04:52.526Z","comments":false,"path":"categories/index.html","permalink":"http://misaka10032.com/categories/index.html","excerpt":"","text":""},{"title":"Links","date":"2018-09-07T04:56:52.728Z","updated":"2018-09-07T04:56:52.728Z","comments":true,"path":"links/index.html","permalink":"http://misaka10032.com/links/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-09-07T03:05:07.911Z","updated":"2018-09-07T03:05:07.911Z","comments":false,"path":"tags/index.html","permalink":"http://misaka10032.com/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-09-07T00:58:23.461Z","updated":"2018-09-06T11:46:26.777Z","comments":false,"path":"repository/index.html","permalink":"http://misaka10032.com/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"在MarkDown中以base64字符串插入图片的方法","slug":"在MarkDown中以base64字符串插入图片的方法","date":"2018-09-08T05:51:40.521Z","updated":"2018-09-08T06:30:52.611Z","comments":true,"path":"2018/09/08/在MarkDown中以base64字符串插入图片的方法/","link":"","permalink":"http://misaka10032.com/2018/09/08/在MarkDown中以base64字符串插入图片的方法/","excerpt":"","text":"方法介绍MarkDown中插入图片有几种方式，其中一种方法可以将图片以base64字符串的形式写入MarkDown文件，做到图文不分离。在该网站上传图片，可获得此图片的base64字符编码。在MarkDown文件中使用该编码的方式如下 123![sample][img_1]//此处可任意添加文字[img_1]: data:image/jpeg;base64,…… //此处为图片的base64编码 获得图片的base64编码也可用python实现。以下程序可将同目录下一张名为“test.jpg”的图像转换为base64编码字符串，并输出到文本文件“out.txt”。 123456import base64f=open('test.jpg','rb')ls_f=base64.b64encode(f.read())f=open('out.txt','w')print(ls_f,file=f)f.close() 如果要将base64编码字符还原为图片，以下程序可读取同目录下“in.txt”中的字符串，并将其转换为名为“test.jpg”的图片（要求该字符串确实对应jpg格式图像）。 1234567import base64f=open('in.txt')bs=f.read()imgdata=base64.b64decode(bs)f=open('test.jpg','wb')f.write(imgdata)f.close() 参考资料[1] Markdown不用上传也能插入图片[2] MarkDown添加图片的三种方式","categories":[{"name":"问题","slug":"问题","permalink":"http://misaka10032.com/categories/问题/"}],"tags":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://misaka10032.com/tags/MarkDown/"},{"name":"python","slug":"python","permalink":"http://misaka10032.com/tags/python/"}]},{"title":"OpenCV 3.4配置（使用VS 2017平台和C++语言）","slug":"OpenCV 3.4配置（使用VS 2017平台和C++语言）","date":"2018-09-08T03:47:28.191Z","updated":"2018-09-08T05:48:59.102Z","comments":true,"path":"2018/09/08/OpenCV 3.4配置（使用VS 2017平台和C++语言）/","link":"","permalink":"http://misaka10032.com/2018/09/08/OpenCV 3.4配置（使用VS 2017平台和C++语言）/","excerpt":"","text":"安装Visual Studio和OpenCV 下载并安装Visual Studio，本文所使用的版本为Community 2017。 下载并安装OpenCV，本文所使用的版本为3.4，安装目录为“C:\\”。 配置环境变量此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量，在系统变量中选择“Path”，添加 1C:\\opencv\\build\\x64\\vc15\\bin x64表示64位系统，vc15对应VS 2017版本，请根据自身情况选择。 环境变量配置完毕之后，需要重启电脑才能生效。 VS 2017配置 配置包含目录 打开属性管理器（视图-&gt;其他窗口-&gt;属性管理器，View-&gt;Other Windows-&gt;Property Manager），选中Debug|Win64中的Microsoft.Cpp.x64.user，右键点击属性（Properties）。 通用属性-&gt;VC++目录-&gt;包含目录（Common Properties-&gt;VC++ Directories-&gt;Include Directories），添加 123C:\\opencv\\build\\includeC:\\opencv\\build\\include\\opencvC:\\opencv\\build\\include\\opencv2 配置库文件目录 同上，在VC++目录中选择库目录（Library Directories），添加 1C:\\opencv\\build\\x64\\vc15\\lib 配置动态链接库 在文件资源管理器中打开目录“C:\\opencv\\build\\x64\\vc15\\lib”，查看库文件。本文示例为“opencv_world343.lib”和“opencv_world343d”（d=debug）。 同上，在属性界面选择链接器-&gt;输入-&gt;附加依赖项（Linker-&gt;Input-&gt;Additional Dependencies），添加 1opencv_world343d.lib 测试 新建windows控制台程序（File-New-Project-Visual C++-Win32 Console Application），本文工程名为“OpenCV_Demo”。 编写测试程序。以下程序会读入一张Mirai Akari的图像（文件名“MiraiAkari.jpg”，需要与源码位于同一目录），创建一个标题为“未来之光”的窗口并显示图像，10秒后自动关闭。 1234567891011121314#include \"pch.h\"#include &lt;iostream&gt;#include &lt;opencv2/core/core.hpp&gt;#include &lt;opencv2/highgui/highgui.hpp&gt;using namespace cv;int main()&#123; Mat img = imread(\"MiraiAkari.jpg\"); namedWindow(\"未来之光\"); imshow(\"未来之光\", img); waitKey(10000);&#125; 运行。注意64位系统需要在顶部工具栏（解决方案平台）中切换为“x64”。 参考资料[1] OpenCV学习笔记（一）——OpenCV3.1.0+VS2015开发环境配置[2] OpenCV 3.4 + VS2017 + C++ 永久配置[3] 图片素材pixiv-66528761，作者たいやき","categories":[{"name":"技术","slug":"技术","permalink":"http://misaka10032.com/categories/技术/"}],"tags":[{"name":"OpenCV","slug":"OpenCV","permalink":"http://misaka10032.com/tags/OpenCV/"}]},{"title":"hexo+github搭建个人网站","slug":"hexo+github搭建个人博客网站","date":"2018-09-07T05:36:09.829Z","updated":"2018-09-07T08:34:15.872Z","comments":true,"path":"2018/09/07/hexo+github搭建个人博客网站/","link":"","permalink":"http://misaka10032.com/2018/09/07/hexo+github搭建个人博客网站/","excerpt":"","text":"安装Git Bash下载Git Bash并安装，可用以下命令查看版本。 1$ git version 安装NodeJs下载NodeJs并安装，在Custom Setup步骤选择“Add to PATH”可自动配置环境变量（在cmd中输入“path”可查看）。查看版本命令为 1$ node -v 安装hexo创建存放网站的文件夹（本文以“C:\\github\\hexo”为例），执行以下命令。 1234$ cd /c/github/hexo //切换到根目录。以下命令均需要在该目录下执行。$ npm i -g hexo //安装hexo$ hexo -v //查看hexo版本$ hexo init //初始化 完成后，打开文件夹可看到以下文件： node_modules：依赖包 public：存放生成页面 scaffolds：命令生成文章等的模板 source：用命令创建的各种文章 themes：主题 _config.yml：整个博客的配置 db.json：source解析所得到的 package.json：项目所需模块项目的配置信息 搭桥到github创建github账号并登录（本文使用账号为“Misaka10840”）。执行New repository，Repository name设定为“Misaka10840.github.io”。 在gitbash中配置github账户信息，输入自己的账户名和邮箱。 12$ git config --global user.name \"Misaka10840\"$ git config --global user.email \"misaka10840@outlook.com\" 创建SSH，过程中可设定名称密码，也可以直接回车跳过。 12$ ssh-keygen -t rsa -C \"misaka10840@outlook.com\" //创建rsa密钥对$ cat id_rsa.pub //显示密钥对（此处为跳过设置名称时的指令） 在github设置页面中点击“SSH and GPG keys”，“New SSH key”，任意设置标题，在“key”中填入获得的密钥对。以下命令用于验证是否成功。 1$ ssh -T git@github.com 配置博客项目打开根目录下的_config.yml文件，找到如下内容并修改： 1234deploy: type: git repo: https://github.com/Misaka10840/Misaka10840.github.io.git branch: master 在gitbash中执行以下命令： 123$ hexo clean //清除缓存文件。$ hexo g //生成静态文件。g=generate$ hexo s //启动服务器。s=server 服务器开启时，默认访问网址为“localhost:4000”，但此时网站还没有部署。 网站部署12$ npm install hexo-deployer-git --save //安装，只需执行一次$ hexo d //部署，每次修改网站后都需要重新部署。d=deploy 如果发现部署后网站无变化，则需要先执行缓存清除命令“hexo clean”。 如果操作正确，此时可正常访问“misaka10840.github.io”。 绑定个人域名 需要已经拥有域名，本文所用的域名为“misaka10032.com”，购买于域名商godaddy。 添加CNAME。在项目source文件夹下新建无后缀、名为“CNAME”的文件，在文件中写入域名。 设置域名DNS（因域名商不同，控制台有所差异），添加A类型记录，值为ip地址。其中ip地址可以通过“ping misaka10840.github.io”指令获得。 打开github中该repositories中的Settings选项卡，本文示例为“https://github.com/Misaka10840/Misaka10840.github.io/settings”。在GitHub Pages中的Custom domain填入域名并保存。 重新部署（hexo d），即可用域名打开。 修改主题hexo的默认主题是landscape，请在这里寻找和预览其他主题。本站所使用的主题是pure，安装命令如下。 1$ git clone https://github.com/cofess/hexo-theme-pure themes/pure 打开网站根目录，修改_config.yml，在该文件中也可修改网站名、作者、语言等信息。 1theme: pure //设定主题为pure 在themes/pure路径下同样有一个名为_config.yml的配置文件，请根据原作者的说明文档进行修改。 发布文章source/_posts路径下存放着markdown格式的文章，可以直接将写好的文档放入该路径，也可以使用创建指令（hexo new “标题”）。文章编辑方法请参考官方资料。 发布文章后需要重新执行部署命令。如果文章出现中文乱码情况，请重新以UTF-8编码格式保存。 参考资料[1] hexo从零开始到搭建完整[2] Hexo站点之域名配置[3] hexo 修改主题","categories":[{"name":"技术","slug":"技术","permalink":"http://misaka10032.com/categories/技术/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://misaka10032.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://misaka10032.com/tags/github/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-09-04T14:15:11.232Z","updated":"2018-09-04T14:15:11.232Z","comments":true,"path":"2018/09/04/hello-world/","link":"","permalink":"http://misaka10032.com/2018/09/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}